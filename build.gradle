plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

javadoc.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web' //JWT생성 및 검증을 위한 의존 라이브러리
	implementation 'mysql:mysql-connector-java:8.0.28'
	implementation 'org.springframework.boot:spring-boot-starter-security' //JWT생성 및 검증을 위한 의존 라이브러리
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test' //JWT생성 및 검증을 위한 의존 라이브러리
	implementation 'org.mapstruct:mapstruct:1.5.1.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.1.Final'

	implementation 'org.springframework.boot:spring-boot-starter-mail'//시큐리티 관련 라이브러리(신규생성)
	implementation 'com.google.code.gson:gson'//시큐리티관련 의존 라이브러리(신규생성)
	testImplementation 'org.springframework.security:spring-security-test' //JWT생성 및 검증을 위한 의존 라이브러리(신규생성)
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'//JWT생성 및 검증을 위한 의존 라이브러리(신규생성)
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'//JWT생성 및 검증을 위한 의존 라이브러리(신규생성)
	runtimeOnly	'io.jsonwebtoken:jjwt-jackson:0.11.5'//JWT생성 및 검증을 위한 의존 라이브러리(신규생성)


}

tasks.named('javadoc') {
	source = sourceSets.main.allJava
	options.memberLevel = JavadocMemberLevel.PRIVATE
	destinationDir = file("build/docs/javadoc")
}
